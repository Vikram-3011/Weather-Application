@inject HttpClient Http
@using Frontend.Models
@using System.Net.Http.Json
@using MudBlazor
@inject IJSRuntime JS

<MudCard Class="p-4">

    <MudPaper Class="p-2 my-2" Style="max-height: 300px; overflow-y: auto;">
        @foreach (var message in Messages)
        {
            <div class="mb-2">
                <b>@(message.Role == "user" ? "You" : "Generative AI"):</b> @message.Content
            </div>
        }
        @if (IsLoading)
        {
            <div class="mb-2 text-blue-500">
                <b>Generative AI:</b> <em>Typing...</em> @* <MudProgressCircular Indeterminate="true" Size="Size.Small" Color="Color.Primary" /> *@
            </div>
        }
    </MudPaper>

    <MudTextField @bind-Value="UserMessage"
                  Placeholder="Ask something..."
                  Adornment="Adornment.End"
                  AdornmentIcon="@Icons.Material.Filled.Send"
                  OnAdornmentClick="SendMessage" />
                  <MudButton OnClick="ClearChat" Color="Color.Error" Class="mt-2">Clear Chat</MudButton>
    @*  <MudButton OnClick="StartVoiceInput" Color="Color.Primary" Class="mt-2">
        🎙️ Speak
    </MudButton> *@
</MudCard>

<style>
     .chat-wrapper {
        display: flex;
        flex-direction: column;
        height: 400px;
        width: 100%;
    }

    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 0.5rem;
        background-color: #2e2e3e;
        color: #e0e0e0;
        font-size: 0.9rem;
    }

    .chat-input {
        padding: 0.5rem;
        background-color: #1e1e2e;
    } 
</style>

@code {
    private string UserMessage = "";
    private bool IsLoading = false;
    private List<GeminiChatMessage> Messages = new();
    private ElementReference messagesContainer;

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(UserMessage)) return;

        Messages.Add(new GeminiChatMessage { Role = "user", Content = UserMessage });
        IsLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync("api/chatbot", Messages);
            var reply = await response.Content.ReadAsStringAsync();
            Messages.Add(new GeminiChatMessage { Role = "model", Content = reply });
        }
        catch (Exception ex)
        {
            Messages.Add(new GeminiChatMessage { Role = "model", Content = $"[Error: {ex.Message}]" });
        }

        UserMessage = "";
        IsLoading = false;

        
    }

    private void ClearChat()
    {
        Messages.Clear();
    }

    
}
