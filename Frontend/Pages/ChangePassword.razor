@page "/change-password"
@inject AuthService AuthService
@inject ISnackbar Snackbar
@inject UserStateManager userState
@inject NavigationManager NavigationManager
@using MudBlazor

<MudContainer MaxWidth="MaxWidth.False" Class="mt-10 d-flex justify-center">
    <MudPaper Elevation="4" Class="p-6" Style="width: 100%; max-width: 600px;">
        <MudText Typo="Typo.h5" Align="Align.Center" Class="mb-4">Change Password</MudText>

        <MudStack Spacing="3">
            <MudTextField @bind-Value="currentPassword" Label="Current Password" InputType="InputType.Password" Variant="Variant.Outlined" Required />
            <MudTextField @bind-Value="newPassword" Label="New Password" InputType="InputType.Password" Variant="Variant.Outlined" Required />
            <MudTextField @bind-Value="confirmPassword" Label="Confirm Password" InputType="InputType.Password" Variant="Variant.Outlined" Required />
        </MudStack>

        <MudStack Row="true" JustifyContent="JustifyContent.End" Class="mt-4">
            <MudButton OnClick="HandleChangePassword" Variant="Variant.Filled" Color="Color.Primary">Update Password</MudButton>
            <MudButton OnClick="@(() => NavigationManager.NavigateTo("/user-profile"))" Variant="Variant.Text" Color="Color.Default" Class="ml-2">Cancel</MudButton>
        </MudStack>
    </MudPaper>
</MudContainer>

@code {
    private string currentPassword = string.Empty;
    private string newPassword = string.Empty;
    private string confirmPassword = string.Empty;

    private async Task HandleChangePassword()
    {
        if (string.IsNullOrWhiteSpace(currentPassword) || string.IsNullOrWhiteSpace(newPassword) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            Snackbar.Add("All fields are required.", Severity.Error);
            return;
        }

        if (newPassword != confirmPassword)
        {
            Snackbar.Add("New password and confirm password do not match.", Severity.Warning);
            return;
        }

        var email = userState.User?.Email;
        if (string.IsNullOrEmpty(email))
        {
            Snackbar.Add("User not logged in.", Severity.Error);
            return;
        }

        var result = await AuthService.ChangePasswordAsync(email, currentPassword, newPassword);
        if (result == null)
        {
            Snackbar.Add("Password changed successfully!", Severity.Success);
            NavigationManager.NavigateTo("/user-profile");
        }
        else
        {
            Snackbar.Add(result, Severity.Error);
        }
    }
}
